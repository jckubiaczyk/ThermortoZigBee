#!/usr/bin/env python3
"""
Generate fabrication files for JLCPCB from KiCad project
Generates Gerbers, drill files, BOM and pick-and-place files
"""

import os
import sys
import zipfile
import pandas as pd
from pathlib import Path

# Configuration
PROJECT_NAME = "thermor_zigbee_controller"
OUTPUT_DIR = "../gerbers"

# JLCPCB layer mapping
LAYER_MAP = {
    "F.Cu": f"{PROJECT_NAME}-F_Cu.gbr",
    "B.Cu": f"{PROJECT_NAME}-B_Cu.gbr", 
    "F.Paste": f"{PROJECT_NAME}-F_Paste.gbr",
    "B.Paste": f"{PROJECT_NAME}-B_Paste.gbr",
    "F.SilkS": f"{PROJECT_NAME}-F_Silks.gbr",
    "B.SilkS": f"{PROJECT_NAME}-B_Silks.gbr",
    "F.Mask": f"{PROJECT_NAME}-F_Mask.gbr",
    "B.Mask": f"{PROJECT_NAME}-B_Mask.gbr",
    "Edge.Cuts": f"{PROJECT_NAME}-Edge_Cuts.gbr",
}

DRILL_MAP = {
    "drill": f"{PROJECT_NAME}.drl",
    "drill_map": f"{PROJECT_NAME}-drl_map.ps"
}

def create_fabrication_readme():
    """Create README for fabrication files"""
    readme_content = """# Fichiers de fabrication PCB - Thermor Zigbee Controller

## Pour JLCPCB

### Spécifications PCB recommandées :
- Layers: 2
- Dimension: 100mm x 80mm
- PCB Thickness: 1.6mm
- Surface Finish: HASL (Lead free)
- Copper Weight: 1oz (35µm)
- Min Track/Spacing: 0.2mm/0.2mm
- Min Hole Size: 0.3mm
- Solder Mask: Green
- Silkscreen: White

### Fichiers inclus :
- `gerbers.zip` : Fichiers Gerber pour fabrication
- `BOM_JLCPCB.csv` : Bill of Materials format JLCPCB
- `PickAndPlace_JLCPCB.csv` : Fichier de placement composants

### Instructions d'upload :
1. Uploadez `gerbers.zip` sur JLCPCB
2. Sélectionnez les spécifications ci-dessus
3. Pour l'assemblage SMT :
   - Uploadez `BOM_JLCPCB.csv`
   - Uploadez `PickAndPlace_JLCPCB.csv`
   - Vérifiez l'orientation des composants

### Composants à souder manuellement :
- Module HLK-PM03
- Connecteurs JST-XH
- Borniers à vis
- Composants traversants

## Notes importantes :
- Vérifiez l'isolation entre 230V et basse tension
- Respectez les distances de sécurité
- Testez l'alimentation avant assemblage complet
"""
    
    with open(os.path.join(OUTPUT_DIR, "README_Fabrication.md"), "w") as f:
        f.write(readme_content)

def generate_jlcpcb_bom():
    """Generate BOM in JLCPCB format"""
    bom_data = [
        # Format: Comment, Designator, Footprint, LCSC
        ["10k", "R4,R5,R6,R7,R8,R9", "Resistor_SMD:R_0805_2012Metric", "C17414"],
        ["1k", "R10,R11,R12", "Resistor_SMD:R_0805_2012Metric", "C17513"],
        ["330", "R1,R2,R3", "Resistor_SMD:R_0805_2012Metric", "C17630"],
        ["100nF", "C4,C5,C6", "Capacitor_SMD:C_0805_2012Metric", "C49678"],
        ["22uF", "C2,C3", "Capacitor_SMD:C_0805_2012Metric", "C45783"],
        ["BSS138", "Q1,Q2,Q3", "Package_TO_SOT_SMD:SOT-23", "C112239"],
        ["AMS1117-3.3", "U6", "Package_TO_SOT_SMD:SOT-223", "C6186"],
        ["LED_RED", "D2,D3,D4", "LED_SMD:LED_0805_2012Metric", "C84256"],
    ]
    
    df = pd.DataFrame(bom_data, columns=["Comment", "Designator", "Footprint", "LCSC"])
    df.to_csv(os.path.join(OUTPUT_DIR, "BOM_JLCPCB.csv"), index=False)

def generate_pick_and_place():
    """Generate pick and place file in JLCPCB format"""
    # This is a simplified example - real data would come from KiCad
    pnp_data = [
        # Format: Designator, Mid X, Mid Y, Layer, Rotation
        ["R1", "10.0", "20.0", "Top", "0"],
        ["R2", "10.0", "22.5", "Top", "0"],
        ["R3", "10.0", "25.0", "Top", "0"],
        ["C4", "15.0", "20.0", "Top", "90"],
        ["C5", "15.0", "22.5", "Top", "90"],
        ["C6", "15.0", "25.0", "Top", "90"],
        ["U6", "50.0", "40.0", "Top", "0"],
        ["Q1", "30.0", "30.0", "Top", "0"],
        ["Q2", "30.0", "33.0", "Top", "0"],
        ["Q3", "30.0", "36.0", "Top", "0"],
    ]
    
    df = pd.DataFrame(pnp_data, columns=["Designator", "Mid X", "Mid Y", "Layer", "Rotation"])
    df.to_csv(os.path.join(OUTPUT_DIR, "PickAndPlace_JLCPCB.csv"), index=False)

def create_gerber_zip():
    """Create zip file with all gerbers"""
    zip_path = os.path.join(OUTPUT_DIR, "gerbers.zip")
    
    # Note: In real implementation, these files would be generated by KiCad
    # This is just creating the structure
    print(f"Creating {zip_path}")
    print("Note: Actual Gerber files must be exported from KiCad")
    
    # Create empty files for demonstration
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zf:
        for layer, filename in LAYER_MAP.items():
            zf.writestr(filename, f"# Gerber file for {layer}\n# Export from KiCad required")
        for drill_type, filename in DRILL_MAP.items():
            zf.writestr(filename, f"# Drill file: {drill_type}\n# Export from KiCad required")

def main():
    """Generate all fabrication files"""
    # Create output directory
    Path(OUTPUT_DIR).mkdir(parents=True, exist_ok=True)
    
    print("Generating fabrication files for JLCPCB...")
    
    # Generate files
    create_fabrication_readme()
    print("✓ Created fabrication README")
    
    generate_jlcpcb_bom()
    print("✓ Generated JLCPCB BOM")
    
    generate_pick_and_place()
    print("✓ Generated Pick and Place file")
    
    create_gerber_zip()
    print("✓ Created Gerber zip structure")
    
    print(f"\nFiles generated in: {OUTPUT_DIR}")
    print("\n⚠️  IMPORTANT: You must export actual Gerber files from KiCad:")
    print("1. Open the PCB in KiCad PCB Editor")
    print("2. File → Fabrication Outputs → Gerbers")
    print("3. Select all layers listed in LAYER_MAP")
    print("4. File → Fabrication Outputs → Drill Files")
    print("5. Replace the placeholder files in gerbers.zip")

if __name__ == "__main__":
    main()